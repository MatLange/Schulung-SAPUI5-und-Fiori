Zusätzliche Fragen
1.) Javascript: this Context erläutern
2.) Für Beispiel Kundenauftrag->Positionen erläutern, wie ohne Create depp alle Eingabewerte in OData gespeichert werden können
3.) Absprünge im Fiori Launchpad, Navigation im FLP, Kataloge im FLP
4.) SmartField im Dialog nutzen (nach bindElement des Dialogs)
5.) Wertehilfe mit Annotationen, aber die Suchhilfe soll Suchfelder enthalten für jedes Property

Deep entity Create:


  method /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CREATE_DEEP_ENTITY.
  DATA : ls_deep_entity TYPE ZCL_ZZ_SFLIGHT_MPC_EXT=>ty_deep_entity,
     lt_item        TYPE TABLE OF ZCL_ZZ_SFLIGHT_MPC_EXT=>ts_spfli,
     ls_header      TYPE ZCL_ZZ_SFLIGHT_MPC_EXT=>ts_scarr,
     lt_spfli       TYPE TABLE OF spfli.

* Methods/FMs should be used in case of direct database table update
* Reading the entity data through the parameter: io_data_provider
    TRY.
        CALL METHOD io_data_provider->read_entry_data
          IMPORTING
            es_data = ls_deep_entity.
        IF ls_deep_entity IS NOT INITIAL.
          ls_header = CORRESPONDING #( ls_deep_entity ).
          ls_header-mandt = sy-mandt.
          MODIFY scarr FROM ls_header.
          IF sy-subrc = 0.
            lt_item[] = CORRESPONDING #( ls_deep_entity-headertoitem[] ).
            LOOP AT lt_item ASSIGNING field-symbol(<ls_item>).
              data(ls_db_spfli) = value spfli(
                                            mandt = sy-mandt
                                            carrid = conv s_carr_id( |{ conv s_carr_id( <ls_item>-carrid ) alpha = in }| )
                                            connid = conv s_conn_id( |{ conv s_conn_id( <ls_item>-connid ) alpha = in }| )
                                            countryfr = conv land1( |{ conv land1( <ls_item>-countryfr ) alpha = in }| )
                                            cityfrom = conv s_from_cit( |{ conv s_from_cit( <ls_item>-cityfrom ) alpha = in }| )
                                            airpfrom = conv s_fromairp( |{ conv s_fromairp( <ls_item>-airpfrom ) alpha = in }| )
                                            countryto = conv land1( |{ conv land1( <ls_item>-countryto ) alpha = in }| )
                                            cityto = conv s_to_city( |{ conv s_to_city( <ls_item>-cityto ) alpha = in }| )
                                            airpto = conv s_toairp( |{ conv s_toairp( <ls_item>-airpto ) alpha = in }| )
                                            fltime = conv s_fltime( |{ conv s_fltime( <ls_item>-fltime ) }| )
                                            deptime = conv s_dep_time( |{ conv s_dep_time( <ls_item>-deptime ) }| )
                                            arrtime = conv s_arr_time( |{ conv s_arr_time( <ls_item>-arrtime ) }| )
                                            distance = conv s_distance( |{ conv s_distance( <ls_item>-distance ) }| )
                                            distid = conv s_distid( |{ conv s_distid( <ls_item>-distid ) }| )
                                            fltype = conv s_fltype( |{ conv s_fltype( <ls_item>-fltype ) }| )
                                            period = conv s_period( |{ conv s_fltype( <ls_item>-period ) }| )
                                            ).
              append ls_db_spfli to lt_spfli.
            ENDLOOP.
            TRY.
                INSERT spfli FROM TABLE lt_item ACCEPTING DUPLICATE KEYS.
                "IF sy-subrc = 4.                     "To overcome the dump
                  CALL METHOD me->copy_data_to_ref   "Populating the ER_DEEP_ENTITY
                    EXPORTING
                      is_data = ls_deep_entity
                    CHANGING
                      cr_data = er_deep_entity.
                "ENDIF.
              CATCH cx_root.
                "Error during insert
            ENDTRY.
          ENDIF.
        ENDIF.
      CATCH /iwbep/cx_mgw_tech_exception.
        "Do Nothing[
    ENDTRY.
  endmethod.

    DATA lo_entity_type TYPE REF TO /iwbep/if_mgw_odata_entity_typ.

    super->define( ).

* Header Entity Name
    lo_entity_type = model->get_entity_type( iv_entity_name = 'Scarr' ).
* MPC_EXT Deep Structure Name
    lo_entity_type->bind_structure( iv_structure_name = 'ZCL_ZZ_SFLIGHT_MPC_EXT=>ty_deep_entity' ).



*--------------------------------------------------------------------*
* Deep Structure
*--------------------------------------------------------------------*
    begin of TY_DEEP_ENTITY,
              MANDT        type ts_scarr-mandt,
              CARRID       type ts_scarr-carrid,
              CARRNAME type ts_scarr-carrname,
              CURRCODE type ts_scarr-currcode,
              URL      type ts_scarr-url,
* Navigation property name should be used otherwise empty records will be shown
             headertoitem type table of ts_spfli with default key,
     end of TY_DEEP_ENTITY.
*--------------------------------------------------------------------*​​



  method SCARRSET_GET_ENTITYSET.
    try.
        select * from scarr into table et_entityset.
      catch /iwbep/cx_mgw_busi_exception .
      catch /iwbep/cx_mgw_tech_exception .
    endtry.
  endmethod.


  method SFLIGHTSET_CREATE_ENTITY.
 io_data_provider->read_entry_data( importing es_data = er_entity ).

    if er_entity-carrid is initial or er_entity-connid is initial or er_entity-fldate is initial.
      "Schlüsselfelder leer - wird einfach ignoriert
      return.
    endif.

    SELECT SINGLE carrid
      FROM sflight
      INTO @DATA(lv_carrid)
      WHERE carrid = @er_entity-carrid
        AND fldate = @er_entity-fldate
        AND connid = @er_entity-connid.
    IF sy-subrc = 0.
      "Datensatz bereits vorhanden.
      MESSAGE e028(/gkv/rm90_ud) WITH lv_carrid INTO DATA(lv_dummy_msg).
      "/gkv/rm50_cl_odata_tools=>raise_error_message( CAST #( /iwbep/if_mgw_conv_srv_runtime~get_message_container( ) ) ).
      "raise exception
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_busi_exception
        EXPORTING
          "http_status_code  = iv_http_status_code
          textid            = /iwbep/cx_mgw_tech_exception=>internal_error
          message_container = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_message_container( ) ).
    ENDIF.



    "Mappen in Datenbank-Update-Struktur
    data(ls_db_update) = value sflight(          carrid      = er_entity-carrid
                                                 connid      = er_entity-connid
                                                 fldate     = er_entity-fldate
                                                 price      = er_entity-price
                                                 currency   = er_entity-currency
                                                 planetype  = er_entity-planetype
                                                 seatsmax   = er_entity-seatsmax
                                                 seatsocc   = er_entity-seatsocc
                                                 paymentsum = er_entity-paymentsum
                                                 seatsmax_b = er_entity-seatsmax_b
                                                 seatsocc_b = er_entity-seatsocc_b
                                                 seatsmax_f = er_entity-seatsmax_f
                                                 seatsocc_f = er_entity-seatsocc_f ).

    "Create
    try.
        modify sflight from ls_db_update.
      catch /iwbep/cx_mgw_busi_exception .
      catch /iwbep/cx_mgw_tech_exception .
    endtry.
  endmethod.


  method SFLIGHTSET_CREATE_ENTITY.
 io_data_provider->read_entry_data( importing es_data = er_entity ).

    if er_entity-carrid is initial or er_entity-connid is initial or er_entity-fldate is initial.
      "Schlüsselfelder leer - wird einfach ignoriert
      return.
    endif.

    SELECT SINGLE carrid
      FROM sflight
      INTO @DATA(lv_carrid)
      WHERE carrid = @er_entity-carrid
        AND fldate = @er_entity-fldate
        AND connid = @er_entity-connid.
    IF sy-subrc = 0.
      "Datensatz bereits vorhanden.
      MESSAGE e028(/gkv/rm90_ud) WITH lv_carrid INTO DATA(lv_dummy_msg).
      "/gkv/rm50_cl_odata_tools=>raise_error_message( CAST #( /iwbep/if_mgw_conv_srv_runtime~get_message_container( ) ) ).
      "raise exception
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_busi_exception
        EXPORTING
          "http_status_code  = iv_http_status_code
          textid            = /iwbep/cx_mgw_tech_exception=>internal_error
          message_container = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_message_container( ) ).
    ENDIF.



    "Mappen in Datenbank-Update-Struktur
    data(ls_db_update) = value sflight(          carrid      = er_entity-carrid
                                                 connid      = er_entity-connid
                                                 fldate     = er_entity-fldate
                                                 price      = er_entity-price
                                                 currency   = er_entity-currency
                                                 planetype  = er_entity-planetype
                                                 seatsmax   = er_entity-seatsmax
                                                 seatsocc   = er_entity-seatsocc
                                                 paymentsum = er_entity-paymentsum
                                                 seatsmax_b = er_entity-seatsmax_b
                                                 seatsocc_b = er_entity-seatsocc_b
                                                 seatsmax_f = er_entity-seatsmax_f
                                                 seatsocc_f = er_entity-seatsocc_f ).

    "Create
    try.
        modify sflight from ls_db_update.
      catch /iwbep/cx_mgw_busi_exception .
      catch /iwbep/cx_mgw_tech_exception .
    endtry.
  endmethod.

  method SFLIGHTSET_GET_ENTITY.
   TRY.
*        CALL METHOD super->sflightset_get_entity
*          EXPORTING
*            iv_entity_name      = iv_entity_name
*            iv_entity_set_name  = iv_entity_set_name
*            iv_source_name      = iv_source_name
*            it_key_tab          = it_key_tab
*            io_request_object   = io_request_object
*            io_tech_request_context = io_tech_request_context
*            it_navigation_path  = it_navigation_path
*          IMPORTING
*            er_entity           = er_entity
*            es_response_context = es_response_context.


    LOOP AT it_key_tab ASSIGNING FIELD-SYMBOL(<ls_keys>).
      CASE <ls_keys>-name.
        WHEN 'Carrid'.
          er_entity-carrid = CONV S_CARR_ID( |{ CONV S_CARR_ID( <ls_keys>-value ) ALPHA = IN }| ).
        WHEN 'Connid'.
          er_entity-connid = CONV S_CONN_ID( |{ CONV S_CONN_ID( <ls_keys>-value ) ALPHA = IN }| ).
        WHEN 'Fldate'.
          er_entity-fldate = CONV S_DATE( |{ CONV S_DATE( <ls_keys>-value ) }| ).
      ENDCASE.
    ENDLOOP.

    if er_entity-carrid is initial or er_entity-connid is initial or er_entity-fldate is initial.
      "Schlüsselfelder leer - wird einfach ignoriert
      return.
    endif.

    SELECT SINGLE carrid
      FROM sflight
      INTO @er_entity
      WHERE carrid = @er_entity-carrid
        AND fldate = @er_entity-fldate
        AND connid = @er_entity-connid.

      CATCH /iwbep/cx_mgw_busi_exception .
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.
  endmethod.


  method SFLIGHTSET_GET_ENTITYSET.
    try.
        select * from sflight into table et_entityset WHERE carrid NE ''.
      catch /iwbep/cx_mgw_busi_exception .
      catch /iwbep/cx_mgw_tech_exception .
    endtry.
  endmethod.


  method SFLIGHTSET_UPDATE_ENTITY.
   io_data_provider->read_entry_data( importing es_data = er_entity ).

    LOOP AT it_key_tab ASSIGNING FIELD-SYMBOL(<ls_keys>).
      CASE <ls_keys>-name.
        WHEN 'Carrid'.
          er_entity-carrid = CONV S_CARR_ID( |{ CONV S_CARR_ID( <ls_keys>-value ) ALPHA = IN }| ).
        WHEN 'Connid'.
          er_entity-connid = CONV S_CONN_ID( |{ CONV S_CONN_ID( <ls_keys>-value ) ALPHA = IN }| ).
        WHEN 'Fldate'.
          er_entity-fldate = CONV S_DATE( |{ CONV S_DATE( <ls_keys>-value ) }| ).
      ENDCASE.
    ENDLOOP.

    if er_entity-carrid is initial or er_entity-connid is initial or er_entity-fldate is initial.
      "Schlüsselfelder leer - wird einfach ignoriert
      return.
    endif.

    SELECT SINGLE carrid
      FROM sflight
      INTO @DATA(lv_carrid)
      WHERE carrid = @er_entity-carrid
        AND fldate = @er_entity-fldate
        AND connid = @er_entity-connid.
    IF sy-subrc <> 0.
      "Datensatz existiert nicht
      MESSAGE e028(/gkv/rm90_ud) WITH lv_carrid INTO DATA(lv_dummy_msg).
      "/gkv/rm50_cl_odata_tools=>raise_error_message( CAST #( /iwbep/if_mgw_conv_srv_runtime~get_message_container( ) ) ).
      "raise exception
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_busi_exception
        EXPORTING
          "http_status_code  = iv_http_status_code
          textid            = /iwbep/cx_mgw_tech_exception=>internal_error
          message_container = CAST #( /iwbep/if_mgw_conv_srv_runtime~get_message_container( ) ).
    ENDIF.


    "Mappen in Datenbank-Update-Struktur
    data(ls_db_update) = value sflight(          carrid      = er_entity-carrid
                                                 connid      = er_entity-connid
                                                 fldate      = er_entity-fldate
                                                 price      = er_entity-price
                                                 currency   = er_entity-currency
                                                 planetype  = er_entity-planetype
                                                 seatsmax   = er_entity-seatsmax
                                                 seatsocc   = er_entity-seatsocc
                                                 paymentsum = er_entity-paymentsum
                                                 seatsmax_b = er_entity-seatsmax_b
                                                 seatsocc_b = er_entity-seatsocc_b
                                                 seatsmax_f = er_entity-seatsmax_f
                                                 seatsocc_f = er_entity-seatsocc_f ).

    "Update
    TRY.
    modify sflight from ls_db_update.
      CATCH /iwbep/cx_mgw_busi_exception .
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.
  endmethod.


  method spfliset_get_entityset.
    loop at it_filter_select_options assigning field-symbol(<ls_filter_select_options>).
      case <ls_filter_select_options>-property.
        when 'Carrid'.
          DATA(lt_selopt_carrid) = <ls_filter_select_options>-select_options.
        when 'Connid'.
          DATA(lt_selopt_connid) = <ls_filter_select_options>-select_options.
      endcase.
    endloop.
    try.
        select * from spfli into table @data(lt_entityset)
          WHERE carrid in @lt_selopt_carrid AND
          connid in @lt_selopt_connid.
        move-corresponding lt_entityset to et_entityset.
      catch /iwbep/cx_mgw_busi_exception .
      catch /iwbep/cx_mgw_tech_exception .
    endtry.
  endmethod.















sap.ui.define([
	'sap/ui/core/mvc/Controller',
	'sap/ui/model/json/JSONModel',
	"sap/m/MessageToast",
	"sap/m/MessageBox",
	"sap/ui/core/Fragment",
	"sap/ui/model/Filter",
	"sap/ui/model/FilterOperator"    
], function (Controller, JSONModel, MessageToast, MessageBox, Fragment, Filter, FilterOperator) {
        "use strict";

        return Controller.extend("odataapp.controller.MainView", {
            
            onInit: function () {
                this._oWizard = this.byId("CreateProductWizard"); // Initialisiert den Wizard
                this._oNavContainer = this.byId("wizardNavContainer"); // Initialisiert den Navigationscontainer
                this._oWizardContentPage = this.byId("wizardContentPage"); // Initialisiert die Wizard-Inhaltsseite
                
                // Lade die Übersichtsseite (zum Überprüfen der eingegebenen Daten) - asynchron per Fragment
                Fragment.load({
                    name: "odataapp.view.ReviewPage",
                    controller: this
                }).then(function (oWizardReviewPage) {
                    this._oWizardReviewPage = oWizardReviewPage;
                    // Das Fragment - Die geladene Page dem Navigationscontainer hinzufügen, dadurch kann man nun dorthin navigieren
                    this._oNavContainer.addPage(this._oWizardReviewPage);
                }.bind(this));

                var oModel = this.getOwnerComponent().getModel();
                this.getView().setModel(oModel); // Setzt das Modell für die Ansicht
                if (oModel.isMetadataLoadingFailed())  {
                    MessageBox.error("Fehler beim Laden der OData Metadaten. Ist der Service erreichbar und verfügbar?");
                }
                oModel.attachMetadataFailed(null, function() {
                    MessageBox.error("Fehler beim Laden der OData Metadaten. Ist der Service erreichbar und verfügbar?");
                });
            },

            onAfterRendering: function() {
                var oModel = this.getOwnerComponent().getModel();
                var oNewContext = oModel.createEntry("/ScarrSet"); // Erstellt einen neuen Eintrag im Modell
                var sPath = oNewContext.getPath();
                this.getView().bindElement(sPath); // Bindet das Element an den neuen Eintrag
            },

            onTableAddRow: function () {
                var oTableRowContext = this.getView().getModel().createEntry("/SpfliSet"); // Erstellt einen neuen Eintrag für die Tabelle
                // Vorlage der Items-Aggregation abrufen
                var oTemplate = this.getView().byId("smartTable").getTable().getBindingInfo("items").template;

                // Vorlage klonen
                var oNewItem = oTemplate.clone();

                // Den Binding-Kontext des neuen Elements auf den erstellten Eintrag setzen
                oNewItem.setBindingContext(oTableRowContext);

                // Das neue Element zur Tabelle hinzufügen
                this.getView().byId("smartTable").getTable().addItem(oNewItem);
            },    

            onTableRowDelete: function(oEvent) {
                var oItem = oEvent.getParameter("listItem");
                var oContext = oItem.getBindingContext();
                oItem.unbindContext(); // Entbindet den Kontext des Elements
                this.getView().getModel().deleteCreatedEntry(oContext); // Löscht den erstellten Eintrag
                this.getView().byId("smartTable").getTable().removeItem(oItem); // Entfernt das Element aus der Tabelle
            },
            
            onBeforeRebindSmartTable: function(oEvent) {
                var mBindingParams = oEvent.getParameter("bindingParams");
                // Setze absichtlich einen Filter auf leeren Eintrag -  für initiales Datenladen der Smarttable, 
                // damit keine aktuellen Einträge aus dem Entityset aus dem Backend angezeigt werden, sondern die SmartTable am Anfang leer ist
                mBindingParams.filters.push(
                    new Filter(
                        "Carrid",
                        FilterOperator.EQ,
                        ''                    )
                );
            },            

            onAdditionalInfoValidation: function () {
                let bError = false;
                const aTableRows = this.getView().byId("smartTable").getTable().getItems();
                for (var oRow of aTableRows) {
                    var aCells = oRow.getCells();
                    for (var oCell of aCells) {
                        if (oCell.getValueState() === "Error") {
                            bError = true;
                            return;
                        }
                    }
                }
                if (bError) {
                    this._oWizard.invalidateStep(this.byId("ScheduleFlightsStep")); // Ungültig machen des Schritts im Wizard
                } else {
                    this._oWizard.validateStep(this.byId("ScheduleFlightsStep")); // Validieren des Schritts im Wizard
                }
            },

            onSmartTableFieldChange: function(oEvent) {
                var aRows = oEvent.getSource().getTable().getItems();
                for (var oRow of aRows) {
                    var aCells = oRow.getCells();
                    for (var oCell of aCells) {
                        if (oCell.getValueState() === "Error") {
                            this.byId("ScheduleFlightsStep").setValidated(false); // Setzt den Schritt als nicht validiert
                            return;
                        }
                    }
                }
                this.byId("ScheduleFlightsStep").setValidated(true); // Setzt den Schritt als validiert
            },

            onAfterNavigate: function (oEvent) {
                var aTableRows = this.getView().byId("smartTable").getTable().getItems();
                const oReviewTable = sap.ui.getCore().byId("smartTableReview").getTable();    
                oReviewTable.removeAllItems(); // Entfernt alle Elemente aus der Überprüfungstabelle
                for (var iRowIndex in aTableRows) {
                    var oRow = aTableRows[iRowIndex];
                    var oTemplate = oReviewTable.getBindingInfo("items").template;
                    var oNewRowItem = oTemplate.clone();
                    oNewRowItem.setBindingContext(oRow.getBindingContext());
                    oReviewTable.addItem(oNewRowItem); // Fügt das neue Element zur Überprüfungstabelle hinzu
                }
            },
    
            onWizardCompletedHandler: function () {
                var bError = false;
                const aTableRows = this.getView().byId("smartTable").getTable().getItems();
                for (var oRow of aTableRows) {
                    var aCells = oRow.getCells();
                    for (var oCell of aCells) {
                        if (oCell.getValueState() === "Error") {
                            bError = true;
                        }
                    }
                }
                if (bError) {
                    sap.m.MessageBox.error("Bitte korrigieren Sie Ihre Eingaben."); // Zeigt eine Fehlermeldung an
                } else {
                    var oTable = this.getView().byId("smartTableReview");
                    this._oNavContainer.to(this._oWizardReviewPage); // Navigiert zur Überprüfungsseite
                }
            },
    
            onEditStepOne: function () {
                this._handleNavigationToStep(0); // Navigiert zum ersten Schritt
            },
    
            onEditStepTwo: function () {
                this._handleNavigationToStep(1); // Navigiert zum zweiten Schritt
            },
    
            onEditStepThree: function () {
                this._handleNavigationToStep(2); // Navigiert zum dritten Schritt
            },

            backToWizardContent: function () {
                this._oNavContainer.backToPage(this._oWizardContentPage.getId()); // Navigiert zurück zur Wizard-Inhaltsseite
            },            
    
            _handleNavigationToStep: function (iStepNumber) {
                var fnAfterNavigate = function () {
                    this._oWizard.goToStep(this._oWizard.getSteps()[iStepNumber]); // Geht zum angegebenen Schritt im Wizard
                    this._oNavContainer.detachAfterNavigate(fnAfterNavigate);
                }.bind(this);
    
                this._oNavContainer.attachAfterNavigate(fnAfterNavigate);
                this.backToWizardContent(); // Navigiert zurück zur Wizard-Inhaltsseite
            },
    
            _handleMessageBoxOpen: function (sMessage, sMessageBoxType, fnFunctionAfterClose) {
                MessageBox[sMessageBoxType](sMessage, {
                    actions: [MessageBox.Action.YES, MessageBox.Action.NO],
                    onClose: fnFunctionAfterClose
                });
            },

            onHandleWizardCancel: function () {
                this._handleMessageBoxOpen("Sind Sie sicher, dass Sie abbrechen wollen?", "warning", this.onCancel.bind(this)); // Öffnet eine Bestätigungsnachricht
            },
    
            onHandleWizardSubmit: function () {
                this._handleMessageBoxOpen("Sind Sie sicher, dass Sie die Daten abschicken wollen?", "confirm", this.onConfirmSubmit.bind(this)); // Öffnet eine Bestätigungsnachricht
            },

            onCancel: function(oAction) {
                if (oAction === MessageBox.Action.NO) {
                    return;
                }                
                this._handleNavigationToStep(0); // Navigiert zum ersten Schritt
                this._oWizard.discardProgress(this._oWizard.getSteps()[0]); // Verwirft den Fortschritt des Wizards
            },

            onConfirmSubmit: function(oAction) {
                if (oAction === MessageBox.Action.NO) {
                    return;
                }

                var oModel = this.getView().getModel();
                var oDeepEntityEntry = {};
                var aHeaderToItem = [];
                var oChanges = oModel.getPendingChanges();    
                for (var sKey in oChanges) {
                    if (sKey.includes("SpfliSet")) {
                        aHeaderToItem.push(oChanges[sKey]); // Fügt die Änderungen zur Header-Item-Liste hinzu
                    } else if (sKey.includes("ScarrSet")) {
                        oDeepEntityEntry = oChanges[sKey]; // Setzt den Deep Entity Eintrag
                    }
                }
                oDeepEntityEntry.HeaderToItem = aHeaderToItem;

                // Ladeicon einschalten
                this.getView().setBusy(true);
                oModel.create("/ScarrSet", oDeepEntityEntry, {
                    success:  function(oData)  {
                        MessageBox["information"]("Create war Erfolgreich"); // Zeigt eine Erfolgsnachricht an
                        oModel.resetPendingChanges(); // Setzt die ausstehenden Änderungen zurück
                        // Ladeicon ausschalten
                        this.getView().setBusy(false);
                    },
                    error: function (oError) {
                        MessageBox["information"]("Fehler beim Create mit Deep Entity."); // Zeigt eine Fehlermeldung an
                        oModel.resetPendingChanges(); // Setzt die ausstehenden Änderungen zurück
                        // Ladeicon ausschalten
                        this.getView().setBusy(false);
                    }
                });	                     

            }

        });
    });
